<?php

/**
 * @file bem_markup.module
 * Add BEM Style markup to to the classes_array
 */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function bem_markup_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  $bem_class = '';

  if (isset($form['#instance']['bem_markup_class'])) {
    $bem_class = $form['#instance']['bem_markup_class'] ? $form['#instance']['bem_markup_class'] : '';
  }

  $form['instance']['bem_markup_class'] = array(
    '#type' => 'textfield',
    '#title' => t('BEM Element Class'),
    '#default_value' => $bem_class,
    '#description' => t('Secify this fields BEM element class.'),
  );
}

/**
 * Implements hook_form_alter().
 */
function bem_markup_form_node_type_form_alter(&$form, &$form_state, $form_id) {
  $type = $form['#node_type']->type;
  $bem_base_class = variable_get('bem_markup_base_class__' . $type, array());

  $form['bem_markup'] = array(
    '#type' => 'fieldset',
    '#title' => 'BEM Markup',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'additional_settings',
    '#description' => t('Add a custom BEM block base class for this content type.'),
  );
  $form['bem_markup']['bem_markup_base_class'] = array(
    '#type' => 'textfield',
    '#title' => t('BEM Block Class'),
    '#default_value' => $bem_base_class,
    '#description' => t('Secify the BEM block class for this content type.'),
  );

  $form['#submit'][] = 'bem_markup_node_type_form_submit';
}

function bem_markup_node_type_form_submit($form, &$form_state) {
  if (isset($form_state['values']['bem_markup_base_class'])) {
    $bem_base_class = $form_state['values']['bem_markup_base_class'];
    $type = $form_state['values']['type'];

    variable_set('bem_markup_base_class__' . $type, $bem_base_class);
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Add markup to the node template
 */
function bem_markup_preprocess_node(&$variables) {
  $type = $variables['type'];
  $bem_base_class = _bem_markup_get_base_class($type);
  // Add the Block class
  if ($bem_base_class) {
    $variables['classes_array'][] = $bem_base_class;
  }
  // Add the viewmode as a modifier.
  if (isset($variables['elements']['#view_mode'])) {
    $view_mode = $variables['elements']['#view_mode'];
    $variables['classes_array'][] = $bem_base_class . '--' . str_replace('_', '-', $view_mode);
  }
}

/**
 * Implementation of hook_preprocess_field().
 */
function bem_markup_preprocess_field(&$variables) {
  $settings = field_info_instance($variables['element']['#entity_type'], $variables['element']['#field_name'], $variables['element']['#bundle']);

  if (isset($variables['element']['#bundle'])) {
    $base_class = _bem_markup_get_base_class($variables['element']['#bundle']);
    $bem_class = $base_class . '__';

    if (isset($settings['bem_markup_class'])) {
      $bem_class .= str_replace(' ', '-', $settings['bem_markup_class']);
    }
    else {
      $bem_class .= str_replace('_', '-', $variables['element']['#field_name']);
    }
    // Add the BEM class to the field classes.
    array_unshift($variables['classes_array'], $bem_class);
  }
}

/**
 * Helper function to get the base class for a specific content type.
 */
function _bem_markup_get_base_class($type) {
  $base_class = &drupal_static(__FUNCTION__);

  if (is_null($base_class)) {
    // If this content type has a base class defined in the variable table
    // then set the base class to that.
    $base_class = variable_get('bem_markup_base_class__' . $type, NULL);
    // If there is no specified base class then use the content type's machine
    // name
    if (is_null($base_class) || $base_class == '') {
      $base_class = str_replace('_', '-', $type);
    }
    // Clean up the formatting of the class.
    $base_class = _bem_markup_format_class($base_class);
  }

  return $base_class;
}

/**
 * Helper function to format a class into BEM.
 */
function _bem_markup_format_class($class) {
  $class = str_replace(' ', '-', $class);
  return $class;
}

